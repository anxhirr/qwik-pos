// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("MONGO_DB_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Shop {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  address      String
  baseCurrency String
  city         String
  description  String
  email        String
  name         String
  ownerId      String @map("owner_id") @db.ObjectId
  phone        String

  users      UserShop[]
  roles      Role[]
  items      Item[]
  orderPrefs OrderPref[]
  Order      Order[]
  categories Category[]

  @@map("shops")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  shops      UserShop[]
  orderPrefs OrderPref[]
  Order      Order[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PriceRule {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  start  DateTime
  end    DateTime
  price  Float
  itemId String   @map("item_id") @db.ObjectId

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("price_rules")
}

model Item {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name        String
  unit        String
  barcode     String
  code        String
  description String
  active      Boolean
  favorite    Boolean
  priceRules  PriceRule[]

  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String @map("shop_id") @db.ObjectId
  categories Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId

  @@map("items")
}

model Role {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name        String
  description String
  permissions String[]
  shopId      String   @map("shop_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId

  users UserShop[]
  shop  Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("roles")
}

model UserShop {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  roleId String @map("role_id") @db.ObjectId
  userId String @map("user_id") @db.ObjectId
  shopId String @map("shop_id") @db.ObjectId

  @@map("users_shops")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name  String
  type  String
  color String
  shopId String @map("shop_id") @db.ObjectId

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  itemIDs String[] @db.ObjectId
  items Item[] @relation(fields: [itemIDs], references: [id])

  @@map("categories")
}

// currency
// customer
// shouldPrint
model OrderPref {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  currency      String
  // customerId  String
  paymentMethod String
  shouldPrint   Boolean
  printFormat   String  @default("80mm")
  shopId        String  @map("shop_id") @db.ObjectId
  userId        String  @map("user_id") @db.ObjectId

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("order_prefs")
}

model OrderItemsField {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name             String
  unit             String
  quantity         Float
  unitPrice        Float
  unitPriceWithTax Float
  Order            Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String @db.ObjectId

  @@map("order_items_fields")
}

model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  docNo          Int
  date           DateTime
  currency       String
  customerId     String            @map("customer_id") @db.ObjectId @default("60f1f1b0e3b9f5b4e0f7c9a1")
  customerName   String            @map("customer_name") @default("Walk-in")
  exchangeRate   Float
  paymentMethod  String
  discountAmount Float
  discountType   String
  notes          String
  items          OrderItemsField[]
  shopId         String            @map("shop_id") @db.ObjectId
  userId         String            @map("user_id") @db.ObjectId

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}
